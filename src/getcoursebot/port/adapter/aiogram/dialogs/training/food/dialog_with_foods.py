from decimal import Decimal
from aiogram import F, Bot, types as t
from aiogram_dialog import Dialog, DialogManager, ShowMode, StartMode, Window
from aiogram_dialog.widgets import text, kbd, input
from dishka import FromDishka
from dishka.integrations.aiogram_dialog import inject

from getcoursebot.application.commands import CalculateDayNormCommand, InputeDayNormCommand
from getcoursebot.application.fitness_service import FitnessService
from getcoursebot.domain.model.day_menu import TypeMeal
from getcoursebot.domain.model.proportions import –°oefficientActivity
from getcoursebot.port.adapter.aiogram.dialogs.query_service import QueryService
from getcoursebot.port.adapter.aiogram.dialogs.resources.dialog_states import PaidStartingDialog
from getcoursebot.port.adapter.aiogram.dialogs.training.food.dialog_states import DayMenuDialog, FoodDialog, InputDialog



async def on_click_day_meny(
    callback: t.CallbackQuery,
    button,
    dialog_manager: DialogManager,
):
    await dialog_manager.start(
        DayMenuDialog.start,
        data={
            "type_meal": [
                TypeMeal.BREAKFAST,
                TypeMeal.LUNCH,
                TypeMeal.DINNER,
                TypeMeal.SNACK
            ],
            "user_id": callback.from_user.id,
            "recipes": {},
            "dirty_photos": [],
            "norma_kkal": dialog_manager.dialog_data["norma_kkal"]
        },
        show_mode=ShowMode.DELETE_AND_SEND
    )


@inject
async def get_user_data_for_kkal(
    dialog_manager: DialogManager,
    service: FromDishka[QueryService],
    **kwargs
):
    data_kkal = await service.query_exists_user_data_for_kkal(
        dialog_manager.start_data["user_id"]
    )
    dialog_manager.dialog_data["norma_kkal"] = data_kkal
    return data_kkal

    
food_dialog = Dialog(
    Window(
        text.Const(
            "–£ –º–µ–Ω—è –Ω–µ—Ç –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ö–ë–ñ–£.\n"
            "–•–æ—Ç–∏—Ç–µ –ø–æ—Å—á–∏—Ç–∞—Ç—å –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ",
            when=~F["kkal"]
        ),
        text.Const(
            "–í–æ—Ç —á—Ç–æ –º–æ–∂–µ–º —Å–¥–µ–ª–∞—Ç—å:",
            when=F["kkal"]
        ),
        kbd.Button(
            text.Const("–†–∞—Å—á–µ—Ç –ö–ë–ñ–£"),
            id="cal_kbju",
            on_click=...
        ),
        kbd.Start(
            text.Const("–í–≤–µ—Å—Ç–∏ –ö–ë–ñ–£"),
            id="input_kbju",
            state=InputDialog.start,
        ),
        kbd.Button(
            text.Const("–ú–µ–Ω—é –Ω–∞ –¥–µ–Ω—å"),
            id="day_menu",
            when=F["kkal"],
            on_click=on_click_day_meny
        ),
        kbd.Start(
            text.Const("‚¨ÖÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é"),
            id="back_to_main_1",
            state=PaidStartingDialog.start,
            show_mode=ShowMode.EDIT,
            mode=StartMode.RESET_STACK
        ),
        state=FoodDialog.start,
        getter=get_user_data_for_kkal
    ),
)


async def get_data_activity(**kwargs):
    activity_types = [
        ("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è", Decimal("1.2")),
        ("–°–ª–∞–±–∞—è", Decimal("1.375")),
        ("–°—Ä–µ–¥–Ω—è—è", Decimal("1.55")),
        ("–í—ã—Å–æ–∫–∞—è", Decimal("1.725")),
        ("–ù–µ –∑–Ω–∞—é üòî", Decimal("1")),
    ]
    return {
        "c_types": activity_types,
        "count": len(activity_types)
    }


async def on_activity_selected(
    callback: t.CallbackQuery, 
    widget, 
    dialog_manager: DialogManager, 
    item_id
):
    dialog_manager.dialog_data["c_activity"] = Decimal(item_id)
    if item_id == –°oefficientActivity.DEFAULT_A:
        bot: Bot = dialog_manager.middleware_data["bot"]
        await bot.send_voice(
            dialog_manager.start_data["user_id"],
            dialog_manager.start_data["voice_id"]
        )
    await dialog_manager.next()


async def on_target_selected(
    callback: t.CallbackQuery, 
    widget, 
    dialog_manager: DialogManager, 
    item_id,
    service: FromDishka[FitnessService] 
):
    dialog_manager.dialog_data["target"] = Decimal(item_id)
    await service.set_proportions(
        CalculateDayNormCommand(
            callback.from_user.id,
            Decimal(dialog_manager.find("inpute_age").get_value()),
            Decimal(dialog_manager.find("inpute_hieght").get_value()),
            Decimal(dialog_manager.find("inpute_weight").get_value()),
            dialog_manager.dialog_data["c_activity"],
            item_id
        )
    )
    await dialog_manager.next()

async def get_data_target(**kwargs):
    target_types = [
        ("–ë—ã—Å—Ç—Ä–æ –ø–æ—Ö—É–¥–µ—Ç—å", Decimal("-0.8")),
        ("–ü–ª–∞–≤–Ω–æ –ø–æ—Ö—É–¥–µ—Ç—å", Decimal("-0.9")),
        ("–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞", Decimal("1")),
        ("–ü–ª–∞–≤–Ω—ã–π –Ω–∞–±–æ—Ä", Decimal("1.1")),
        ("–ë—ã—Å—Ç—Ä—ã–π –Ω–∞–±–æ—Ä", Decimal("1.2")),
    ]
    return {
        "types": target_types,
        "count": len(target_types)
    }


async def on_target_selected_input(
    callback: t.CallbackQuery, 
    widget, 
    dialog_manager: DialogManager, 
    item_id,
    service: FromDishka[FitnessService] 
):
    await service.set_input_user_data(
        InputeDayNormCommand(
            callback.from_user.id,
            Decimal(dialog_manager.find("inpute_kkal").get_value()),
            Decimal(dialog_manager.find("inpute_b").get_value()),
            Decimal(dialog_manager.find("inpute_j").get_value()),
            Decimal(dialog_manager.find("inpute_u").get_value()),
            dialog_manager.dialog_data["c_activity"],
            Decimal(item_id)
        )
    )
    await dialog_manager.next()


input_kbju_dialog = Dialog(
    Window(
        text.Const(
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É –ö–∞–ª–æ—Ä–∏–π.\n"
            "–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä, 1650üëá"
        ),
        input.TextInput(id="inpute_kkal", on_success=kbd.Next()),
        state=InputDialog.start
    ),
    Window(
        text.Const(
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É –±–µ–ª–∫–æ–≤.\n"
            "–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä, 120üëá"
        ),
        input.TextInput(id="inpute_b", on_success=kbd.Next()),
        state=InputDialog.b
    ),
    Window(
        text.Const(
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É –∂–∏—Ä–æ–≤.\n"
            "–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä, 55üëá"
        ),
        input.TextInput(id="inpute_j", on_success=kbd.Next()),
        state=InputDialog.j
    ),
    Window(
        text.Const(
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É —É–≥–ª–µ–≤–æ–¥–æ–≤.\n"
            "–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä, 220üëá"
        ),
        input.TextInput(id="inpute_u", on_success=kbd.Next()),
        state=InputDialog.u
    ),
    Window(
        text.Const("–í—ã–±–µ—Ä–∏—Ç–µ –í–∞—à —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:"),
        kbd.Column(
            kbd.Select(
                text.Format("{item[0]}"),
                id="s_types",
                item_id_getter=lambda x: x[1],
                items="c_types",
                on_click=on_activity_selected
            )
        ),
        state=InputDialog.activity,
        getter=get_data_activity
    ),
    Window(
        text.Const("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –º–µ–Ω—é:"),
        kbd.Column(
            kbd.Select(
                text.Format("{item[0]}"),
                id="s_2_types",
                item_id_getter=lambda x: x[1],
                items="types",
                on_click=on_target_selected_input
            )
        ),
        state=InputDialog.target,
        getter=get_data_target
    ),
    # Window(
    #     text.Format(
    #         "–ò—Ç–∞–∫, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ:\n\n"
    #         "–ö–ö–∞–ª - {kkal}\n"
    #         "–ë–µ–ª–∫–∏ - {b}\n"
    #         "–ñ–∏—Ä—ã - {j}\n"
    #         "–£–≥–ª–µ–≤–æ–¥—ã - {u}\n\n"
    #         "–î–∞–ª—å—à–µ —è –±—É–¥—É –ø–æ–¥–±–∏—Ä–∞—Ç—å –≤–∞–º —Ä–µ—Ü–µ–ø—Ç—ã –µ–∂–µ–¥–Ω–µ–≤–Ω–æ, —á—Ç–æ–±—ã —É–ª–æ–∂–∏—Ç—å—Å—è –≤ —ç—Ç–∏ —Ü–∏—Ñ—Ä—ã."
    #         "–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–∏ –ö–ë–ñ–£ –≤ –ø–µ—Ä–≤–æ–º —Ä–∞–∑–¥–µ–ª–µ –ø–∏—Ç–∞–Ω–∏—è, "
    #         "–µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –∏ —è –±—É–¥—É –ø–æ–¥–±–∏—Ä–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ–¥ –Ω–∏—Ö."
    #     ),
    #     kbd.Button(
    #         text.Const("–ú–µ–Ω—é –Ω–∞ –¥–µ–Ω—å"), 
    #         id="day_menu_3", 
    #         on_click=Clicker.on_day_menu,
    #     ),
    #     kbd.Button(text.Const("‚¨ÖÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é"), id="in_main_3", on_click=Clicker.on_in_main_calc_hbju),
    #     state=InputDialog.end,
    #     getter=Getter.get_user_data
    # )
)