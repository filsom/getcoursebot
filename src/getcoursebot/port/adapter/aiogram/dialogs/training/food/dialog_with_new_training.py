import operator

from aiogram import F
from aiogram.enums import ContentType
from aiogram_dialog import Dialog, DialogManager, ShowMode, StartMode, Window
from aiogram_dialog.widgets import input, text, kbd
from aiogram_dialog.widgets.media import DynamicMedia
from aiogram_dialog.widgets.text import Const, Format

from getcoursebot.port.adapter.aiogram.dialogs.start.dialog_with_mailling import MaillingDialog
from getcoursebot.port.adapter.aiogram.dialogs.training.food.dialog_states import (
    NewTrainingDialog
)
from getcoursebot.port.adapter.aiogram.dialogs.training.food.dialog_helpers import (
    Getter, 
    Clicker, 
    on_input_text_handler, 
    on_input_videos_handler
)
# class OnClickTraining:
#     @staticmethod
#     async def on_done_mailing(
#         event: CallbackQuery, button, dialog_manager: DialogManager
#     ):
#         await dialog_manager.done()

#     @staticmethod
#     async def on_input_text(
#         message: Message, source, dialog_manager: DialogManager, _
#     ):
#         await message.delete()
#         dialog_manager.show_mode = ShowMode.EDIT
#         await dialog_manager.next()

#     @staticmethod
#     @inject
#     async def on_click_send_mailling_free(
#         callback: CallbackQuery, widget, dialog_manager: DialogManager
#     ):
#         dialog_manager.show_mode = ShowMode.DELETE_AND_SEND
#         bot: Bot = dialog_manager.middleware_data['bot']
#         list_ids = await service.query_user_ids_with_role([NameRole.Free])
#         builder = MediaGroupBuilder()
#         for video in dialog_manager.dialog_data['videos']:
#             builder.add_video(video[0])
#         xx = builder.build()
#         for id in list_ids:
#             await bot.send_media_group(id, xx)
#             await bot.send_message(
#                 id, 
#                 dialog_manager.find('text_training_1').get_value(),
#             )
#         await dialog_manager.next()

#     @staticmethod
#     async def on_click_not_send_mailling_free(
#         callback: CallbackQuery, widget, dialog_manager: DialogManager
#     ):
#         await dialog_manager.next()

#     @staticmethod
#     @inject
#     async def on_click_send_mailling_pay(
#         callback: CallbackQuery, widget, dialog_manager: DialogManager
#     ):
#         dialog_manager.show_mode = ShowMode.DELETE_AND_SEND
#         bot: Bot = dialog_manager.middleware_data['bot']
#         list_ids = await service.query_user_ids_with_role([NameRole.Training])
#         builder = MediaGroupBuilder()
#         for video in dialog_manager.dialog_data['videos']:
#             builder.add_video(video[0])
#         xx = builder.build()
#         builder = InlineKeyboardBuilder()
#         builder.add(InlineKeyboardButton(text='–í—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏', callback_data="all_training"))
#         for id in list_ids:
#             await bot.send_media_group(id, xx)
#             await bot.send_message(
#                 id, 
#                 dialog_manager.find('text_training_1').get_value(),
#                 reply_markup=builder.as_markup()
#             )
#         await dialog_manager.done()

#     @staticmethod
#     @inject
#     async def on_click_plan_send_mailling_pay(
#         callback: CallbackQuery, widget, dialog_manager: DialogManager, service: FromDishka[FitnessService]
#     ):
#         # –î–æ–ø–∏—Å–∞—Ç—å!
#         await dialog_manager.done()


async def on_mailling_message(
    event,
    button, 
    dialog_manager: 
    DialogManager, 
):
    await dialog_manager.start(
        state=MaillingDialog.new_mall,
        data={
            "photos": dialog_manager.dialog_data['videos'],
            "text_mailling_mess": dialog_manager.find('text_training_1').get_value()
        },
        show_mode=ShowMode.EDIT,
        mode=StartMode.RESET_STACK
    )

new_training_dialog = Dialog(
    Window(
        Const("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!"),
        kbd.Column(
            kbd.Select(
                id='id_type_training',
                text=text.Format("{item[0]}"),
                items="categories",
                item_id_getter=operator.itemgetter(1),
                on_click=Clicker.on_category_name
            ),
        ),
        kbd.Cancel(text.Const("‚¨ÖÔ∏è –í –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"), id="to_main_228"),
        state=NewTrainingDialog.start,
        getter=Getter.get_categories
    ),
    Window(
        text.Format(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏ üìπ\n\n"
            "–ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ <b>–Ω–µ</b> <b>–¥–æ–±–∞–≤–ª—è–π—Ç–µ</b> –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –Ω–∏–º,\n"
            "–æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —à–∞–≥–µ‚ùóÔ∏è",
            when=F["media_count"] == 0
        ),
        DynamicMedia(selector="media"),
        kbd.StubScroll(id="pages", pages="media_count"),
        kbd.Group(
            kbd.NumberedPager(
                scroll="pages", 
                when=F["pages"] > 1, 
                page_text=Format("‚Ññ{target_page1}"), 
                current_page_text=Format("üîé")), 
                width=2
            ),
        kbd.Column(
            kbd.Button(
                Format("–£–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ ‚Ññ{media_number} üóëÔ∏è"),
                id="del",
                on_click=Clicker.on_delete_video,
                when="media_count",
            ),
            kbd.Button(
                Format("–î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ ‚úÖ"),
                id="confirm",
                when="media_count",
                on_click=kbd.Next(),
            ),
            kbd.Cancel(text=Const("–û—Ç–º–µ–Ω–∏—Ç—å"), when="media_count"),
        ),
        input.MessageInput(
            content_types=[ContentType.VIDEO], 
            func=on_input_videos_handler
        ),
        getter=Getter.get_media_group_videos,
        state=NewTrainingDialog.videos,
    ),
    Window(
        text.Const(
            "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ üí™\n\n"
            "(–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ 1024 —Å–∏–º–≤–æ–ª–∞)"
        ),
        input.TextInput(
            id='text_training_1', 
            on_success=on_input_text_handler
        ),
        kbd.Back(text=Const("–ù–∞–∑–∞–¥")),
        kbd.Cancel(text=Const("–û—Ç–º–µ–Ω–∏—Ç—å")),
        state=NewTrainingDialog.text,
    ),
    Window(
        Format(
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∏–Ω–∏—Ä–æ–≤–æ–∫. üëá\n\n"
            "{text_training_1}\n\n"
            "–§–æ—Ä–º–∞—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±—É–¥–µ—Ç –±–µ–∑ –∫–Ω–æ–ø–æ–∫ <b>–ù–∞–∑–∞–¥</b> –∏ <b>–û—Ç–º–µ–Ω–∏—Ç—å</b>.\n"
            "–ù–∞–∂–º–∏—Ç–µ ‚úÖ, —á—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!"
        ),
        kbd.Button(
            text=Const("‚úÖ"), 
            id="add", 
            on_click=Clicker.on_confirm_preview
        ),
        kbd.Back(text=Const("–ù–∞–∑–∞–¥")),
        kbd.Cancel(text=Const("–û—Ç–º–µ–Ω–∏—Ç—å")),
        state=NewTrainingDialog.view,
        getter=Getter.get_text_training
    ),
    Window(
        Const(
            "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ‚úÖ\n"
            "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?"
        ),
        kbd.Column(
            kbd.Row(
                kbd.Button(
                    Const("–î–∞"),
                    id='yes_send_free', 
                    on_click=on_mailling_message
                ),
                kbd.Cancel(
                    Const("–ù–µ—Ç"), 
                    id='not_send_free', 
                )
            ),
        ),
        state=NewTrainingDialog.send_free
    )
)